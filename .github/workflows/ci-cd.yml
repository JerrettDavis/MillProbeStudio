name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  issues: write
  pull-requests: write
  id-token: write

jobs:
  test:
    name: Test and Coverage
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm cache clean --force
          rm -rf node_modules package-lock.json
          npm install
          # Explicitly reinstall rollup to fix optional dependencies
          npm install rollup --force

      - name: Run linting
        run: npm run lint

      - name: Run tests with coverage
        run: npm run test:coverage

      - name: Generate JUnit coverage report
        run: npm run test:report:junit

      - name: Upload json coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/coverage-final.json
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload JUnit test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Archive coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ github.sha }}
          path: |
            coverage/
            */*.junit.xml
          retention-days: 30

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm cache clean --force
          rm -rf node_modules package-lock.json
          npm install
          # Explicitly reinstall rollup to fix optional dependencies
          npm install rollup --force

      - name: Build application
        run: npm run build
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}       

      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}
          path: dist/
          retention-days: 30

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    outputs:
      new-release-published: ${{ steps.semantic-release.outputs.new-release-published }}
      new-release-version: ${{ steps.semantic-release.outputs.new-release-version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm cache clean --force
          rm -rf node_modules package-lock.json
          npm install
          # Explicitly reinstall rollup to fix optional dependencies
          npm install rollup --force

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}
          path: dist/

      - name: Install semantic-release dependencies
        run: |
          npm install --no-save semantic-release @semantic-release/changelog @semantic-release/git @semantic-release/github @semantic-release/npm @semantic-release/commit-analyzer @semantic-release/release-notes-generator

      - name: Create zip archive of build
        run: |
          cd dist
          zip -r ../dist.zip .
          cd ..

      - name: Run semantic-release
        id: semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npx semantic-release 2>&1 | tee semantic-release.log
          
          # Check if a new release was created
          if grep -q "Published release" semantic-release.log; then
            echo "new-release-published=true" >> $GITHUB_OUTPUT
            VERSION=$(grep "Published release" semantic-release.log | sed 's/.*Published release \([0-9\.]*\).*/\1/')
            echo "new-release-version=$VERSION" >> $GITHUB_OUTPUT
          else
            echo "new-release-published=false" >> $GITHUB_OUTPUT
            echo "new-release-version=" >> $GITHUB_OUTPUT
          fi

  deploy:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: release
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    permissions:
      pages: write
      id-token: write
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}
          path: dist/

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
